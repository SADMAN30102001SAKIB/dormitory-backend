#!/usr/bin/env python3
"""
LLM Debug Log Viewer

This script helps you view the debug logs generated by the LLM pipeline.
Run this script to see the detailed debug information for each LLM interaction.
"""

import os
from datetime import datetime


def get_log_file_path():
    """Get the path to the log file relative to this script's location."""
    script_dir = os.path.dirname(os.path.abspath(__file__))
    return os.path.join(script_dir, "llm_debug.log")


def view_debug_log():
    """View the LLM debug log file."""
    log_file = get_log_file_path()

    if not os.path.exists(log_file):
        print(f"❌ Debug log file '{log_file}' not found.")
        print("The debug log will be created after the first LLM interaction.")
        return

    print(f"📊 LLM Debug Log Viewer")
    print(f"Log file: {log_file}")
    print(f"File size: {os.path.getsize(log_file)} bytes")
    print("=" * 80)

    try:
        with open(log_file, "r", encoding="utf-8") as f:
            content = f.read()
            print(content)
    except Exception as e:
        print(f"❌ Error reading log file: {e}")


def tail_debug_log(lines=50):
    """View the last N lines of the debug log."""
    log_file = get_log_file_path()

    if not os.path.exists(log_file):
        print(f"❌ Debug log file '{log_file}' not found.")
        return

    print(f"📊 Last {lines} lines of LLM Debug Log")
    print("=" * 80)

    try:
        with open(log_file, "r", encoding="utf-8") as f:
            all_lines = f.readlines()
            last_lines = all_lines[-lines:]
            print("".join(last_lines))
    except Exception as e:
        print(f"❌ Error reading log file: {e}")


def clear_debug_log():
    """Clear the debug log file."""
    log_file = get_log_file_path()

    try:
        with open(log_file, "w", encoding="utf-8") as f:
            f.write("")
        print(f"✅ Debug log cleared: {log_file}")
    except Exception as e:
        print(f"❌ Error clearing log file: {e}")


if __name__ == "__main__":
    import sys

    if len(sys.argv) > 1:
        command = sys.argv[1].lower()

        if command == "tail":
            lines = int(sys.argv[2]) if len(sys.argv) > 2 else 50
            tail_debug_log(lines)
        elif command == "clear":
            clear_debug_log()
        elif command == "view":
            view_debug_log()
        else:
            print("Usage:")
            print("  python view_llm_debug.py view    # View entire log")
            print(
                "  python view_llm_debug.py tail [N] # View last N lines (default: 50)"
            )
            print("  python view_llm_debug.py clear   # Clear the log file")
    else:
        view_debug_log()
