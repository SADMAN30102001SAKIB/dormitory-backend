from django.contrib.auth.models import User
from django.db import models


class Institution(models.Model):
    name = models.CharField(max_length=255)
    location = models.CharField(max_length=255, blank=True, null=True)
    website = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.name


class WorkOrganization(models.Model):
    name = models.CharField(max_length=255)
    location = models.CharField(max_length=255, blank=True, null=True)
    website = models.URLField(blank=True, null=True)

    def __str__(self):
        return self.name


class Skillset(models.Model):
    name = models.CharField(max_length=128, unique=True)
    description = models.TextField(blank=True, null=True)

    def __str__(self):
        return self.name


class Interest(models.Model):
    name = models.CharField(max_length=128, unique=True)

    def __str__(self):
        return self.name


class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=128, blank=True, null=True)
    bio = models.TextField(blank=True, null=True)
    profile_pic = models.ImageField(upload_to="profiles/", blank=True, null=True)
    created_at = models.DateTimeField(auto_now_add=True)

    profile_summary = models.TextField(
        blank=True,
        null=True,
        help_text="A brief summary of the user's profile generated by LLM",
    )

    profile_memory = models.TextField(
        blank=True,
        null=True,
        help_text="A memory of the user's interactions with LLM for cross-conversation context",
    )

    interests = models.ManyToManyField(Interest, blank=True, related_name="profiles")

    users_embedding = models.TextField(
        blank=True,
        null=True,
        help_text="The user's profile embedding for recommendations generated by LLM",
    )

    skills = models.ManyToManyField(Skillset, blank=True, related_name="users")

    def __str__(self):
        return self.user.username


"""
Note: The following models are related to the Profile model and represent
      the user's education, work experience, and portfolio.
"""


class Education(models.Model):
    profile = models.ForeignKey(
        Profile, on_delete=models.CASCADE, related_name="educations"
    )
    institution = models.ForeignKey(Institution, on_delete=models.CASCADE)
    major = models.CharField(max_length=128, null=True, blank=True)
    degree = models.CharField(max_length=128, null=True, blank=True)
    series = models.PositiveIntegerField(
        blank=True,
        null=True,
        help_text="Series/Batch number of the degree (e.g., 1st, 2nd, 21st)",
    )
    start_year = models.PositiveIntegerField(blank=True, null=True)
    end_year = models.PositiveIntegerField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        ordering = ["-start_year"]

    def __str__(self):
        return f"{self.degree} in {self.major} at {self.institution.name}"


class WorkExperience(models.Model):
    profile = models.ForeignKey(
        Profile, on_delete=models.CASCADE, related_name="work_experiences"
    )
    organization = models.ForeignKey(WorkOrganization, on_delete=models.CASCADE)
    position = models.CharField(max_length=128, null=True, blank=True)
    start_date = models.DateField(blank=True, null=True)
    end_date = models.DateField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)

    class Meta:
        ordering = ["-start_date"]

    def __str__(self):
        return f"{self.position} at {self.organization.name}"


class Portfolio(models.Model):
    profile = models.ForeignKey(
        Profile, on_delete=models.CASCADE, related_name="portfolios"
    )
    title = models.CharField(max_length=255)
    collaborators = models.TextField(
        blank=True, null=True, help_text="Names or usernames of collaborators"
    )
    url = models.URLField(blank=True, null=True)
    description = models.TextField(blank=True, null=True)
    date = models.DateField(blank=True, null=True)
    tech_stack = models.ManyToManyField(Skillset, blank=True, related_name="projects")

    def __str__(self):
        return self.title
